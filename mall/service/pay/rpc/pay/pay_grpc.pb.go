// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayclientClient is the client API for Payclient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayclientClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error)
	Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error)
}

type payclientClient struct {
	cc grpc.ClientConnInterface
}

func NewPayclientClient(cc grpc.ClientConnInterface) PayclientClient {
	return &payclientClient{cc}
}

func (c *payclientClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/payclient.Payclient/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payclientClient) Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error) {
	out := new(DetailResponse)
	err := c.cc.Invoke(ctx, "/payclient.Payclient/Detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payclientClient) Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error) {
	out := new(CallbackResponse)
	err := c.cc.Invoke(ctx, "/payclient.Payclient/Callback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayclientServer is the server API for Payclient service.
// All implementations must embed UnimplementedPayclientServer
// for forward compatibility
type PayclientServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Detail(context.Context, *DetailRequest) (*DetailResponse, error)
	Callback(context.Context, *CallbackRequest) (*CallbackResponse, error)
	mustEmbedUnimplementedPayclientServer()
}

// UnimplementedPayclientServer must be embedded to have forward compatible implementations.
type UnimplementedPayclientServer struct {
}

func (UnimplementedPayclientServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPayclientServer) Detail(context.Context, *DetailRequest) (*DetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedPayclientServer) Callback(context.Context, *CallbackRequest) (*CallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedPayclientServer) mustEmbedUnimplementedPayclientServer() {}

// UnsafePayclientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayclientServer will
// result in compilation errors.
type UnsafePayclientServer interface {
	mustEmbedUnimplementedPayclientServer()
}

func RegisterPayclientServer(s grpc.ServiceRegistrar, srv PayclientServer) {
	s.RegisterService(&Payclient_ServiceDesc, srv)
}

func _Payclient_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayclientServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payclient.Payclient/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayclientServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payclient_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayclientServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payclient.Payclient/Detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayclientServer).Detail(ctx, req.(*DetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payclient_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayclientServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payclient.Payclient/Callback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayclientServer).Callback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Payclient_ServiceDesc is the grpc.ServiceDesc for Payclient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payclient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payclient.Payclient",
	HandlerType: (*PayclientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Payclient_Create_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Payclient_Detail_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _Payclient_Callback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
